blueprint:
  name: PV Autostart (Pyscript)
  description: >
    Start/stop a single device from PV surplus with hysteresis, daily targets,
    and optional forecast override. Positive grid-import sensors are summed.
    States are validated defensively. Daily counters reset inside Pyscript at 00:00.
    Surplus approximation path: surplus = max(0, pv_now - sum(import_components)).
  domain: automation
  source_url: https://example.local/pv_autostart  # optional placeholder

# ------------------------------- Inputs ---------------------------------------
input:
  switch_entity:
    name: Switch to control
    description: Entity to be switched (e.g. switch.pool_pump)
    selector:
      entity:
        filter:
          - domain: switch
  sensor_device_power:
    name: Device power (W) [optional]
    description: Sensor of the device's instantaneous power draw in watts
    default: ''
    selector:
      entity:
        filter:
          - domain: sensor
  off_after_minutes_without_draw:
    name: Turn off after minutes without draw [optional]
    description: Minutes of continuous "no draw" before switching off
    default: 0
    selector:
      number:
        min: 0
        max: 240
        step: 1
        unit_of_measurement: min
        mode: slider
  no_draw_threshold_watts:
    name: "No draw" threshold (W)
    description: Device power <= threshold counts as "no draw"
    selector:
      number:
        min: 0
        max: 5000
        step: 1
        unit_of_measurement: W
  buffer_on_minutes:
    name: On buffer (minutes)
    description: Continuous surplus required before switching on
    selector:
      number:
        min: 0
        max: 60
        step: 1
        unit_of_measurement: min
  buffer_off_minutes:
    name: Off buffer (minutes)
    description: Continuous import/deficit required before switching off
    selector:
      number:
        min: 0
        max: 60
        step: 1
        unit_of_measurement: min
  min_runtime_per_day_minutes:
    name: Minimum runtime per day [optional]
    description: Target runtime to achieve daily before stopping
    default: 0
    selector:
      number:
        min: 0
        max: 1440
        step: 1
        unit_of_measurement: min
  min_cycles_per_day:
    name: Minimum auto-start cycles per day [optional]
    description: Only cycles started by this blueprint count
    default: 0
    selector:
      number:
        min: 0
        max: 20
        step: 1
  interruptible:
    name: Device may be interrupted
    description: If true, the controller can stop the device when importing power
    selector:
      boolean: {}
  sensor_grid_import_components:
    name: Grid import components (positive) [one or more]
    description: >
      List of positive power sensors to sum up total grid import (W).
      Missing/unavailable values are treated as 0.
    selector:
      entity:
        multiple: true
        filter:
          - domain: sensor
  start_time_if_target_not_met:
    name: Fallback start time if targets not met (local time)
    description: >
      HH:MM or HH:MM:SS. If targets are not met by this time, the device will be
      forced to start, unless the forecast predicts enough energy later.
    selector:
      time: {}
  sensor_forecast_energy_today:
    name: Remaining PV energy today (kWh) [optional]
    description: >
      If provided, the controller may delay or advance the forced start based on
      this remaining energy forecast.
    default: ''
    selector:
      entity:
        filter:
          - domain: sensor
  sensor_pv_power_now:
    name: PV power now (W)
    description: Current PV production power in watts
    selector:
      entity:
        filter:
          - domain: sensor

# -------------------------------- Triggers ------------------------------------
trigger:
  - platform: homeassistant
    event: start
  - platform: time_pattern
    minutes: "/10"

# -------------------------------- Actions -------------------------------------
variables:
  v_switch_entity: !input switch_entity
  v_sensor_device_power: !input sensor_device_power
  v_off_after_minutes_without_draw: !input off_after_minutes_without_draw
  v_no_draw_threshold_watts: !input no_draw_threshold_watts
  v_buffer_on_minutes: !input buffer_on_minutes
  v_buffer_off_minutes: !input buffer_off_minutes
  v_min_runtime_per_day_minutes: !input min_runtime_per_day_minutes
  v_min_cycles_per_day: !input min_cycles_per_day
  v_interruptible: !input interruptible
  v_sensor_grid_import_components: !input sensor_grid_import_components
  v_start_time_if_target_not_met: !input start_time_if_target_not_met
  v_sensor_forecast_energy_today: !input sensor_forecast_energy_today
  v_sensor_pv_power_now: !input sensor_pv_power_now

action:
  - service: pyscript.pv_autostart
    data:
      automation_id: "{{ this.entity_id }}"
      switch_entity: "{{ v_switch_entity }}"
      sensor_device_power: "{{ v_sensor_device_power if v_sensor_device_power != '' else None }}"
      off_after_minutes_without_draw: "{{ v_off_after_minutes_without_draw if v_off_after_minutes_without_draw|int > 0 else None }}"
      no_draw_threshold_watts: "{{ v_no_draw_threshold_watts }}"
      buffer_on_minutes: "{{ v_buffer_on_minutes }}"
      buffer_off_minutes: "{{ v_buffer_off_minutes }}"
      min_runtime_per_day_minutes: "{{ v_min_runtime_per_day_minutes if v_min_runtime_per_day_minutes|int > 0 else None }}"
      min_cycles_per_day: "{{ v_min_cycles_per_day if v_min_cycles_per_day|int > 0 else None }}"
      interruptible: "{{ v_interruptible }}"
      sensor_grid_import_components: "{{ v_sensor_grid_import_components }}"
      start_time_if_target_not_met: "{{ v_start_time_if_target_not_met }}"
      sensor_forecast_energy_today: "{{ v_sensor_forecast_energy_today if v_sensor_forecast_energy_today != '' else None }}"
      sensor_pv_power_now: "{{ v_sensor_pv_power_now }}"

mode: restart
max_exceeded: silent

# ----------------------------- Example (comment) ------------------------------
# Example inputs (copy into UI as needed):
# switch_entity: switch.pool_pump
# sensor_device_power: sensor.pool_pump_power
# no_draw_threshold_watts: 15
# off_after_minutes_without_draw: 5
# buffer_on_minutes: 3
# buffer_off_minutes: 4
# interruptible: true
# sensor_grid_import_components:
#   - sensor.netzbezug_phase_l1
#   - sensor.netzbezug_phase_l2
# start_time_if_target_not_met: "15:30"
# sensor_forecast_energy_today: sensor.pv_forecast_remaining_kwh
# sensor_pv_power_now: sensor.pv_power_now
# min_runtime_per_day_minutes: 60
# min_cycles_per_day: 1

# Notes:
# - Household load approximation: surplus = max(0, pv_now - sum(import_components)).
#   This avoids requiring a dedicated "household load" sensor and keeps behavior
#   stable even when some components briefly go unavailable.
# - A minimal switch cooldown is enforced in the Pyscript to protect relays.
# - The controller logs explicitly when the forecast overrides the start time.
