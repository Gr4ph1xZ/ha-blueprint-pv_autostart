blueprint:
  name: PV Autostart
  description: >
    ### PV Autostart

    This blueprint registers a pyscript service that automatically starts and stops
    a single appliance based on the available photovoltaic (PV) surplus.  It
    observes your PV production and grid import sensors and makes decisions
    according to configurable buffers.  When the surplus has been positive for
    a defined time, the device will be started; when there is no load or
    importing from the grid persists, the device will be stopped.  Optionally
    a minimum run‑time and/or minimum number of cycles per day can be set.

    **Inputs**

    * **switch_entity** - the entity id of the switch controlling the appliance.
    * **sensor_device_power** - (optional) sensor measuring the current power draw of the device in watts.
    * **off_after_minutes_without_draw** - (optional) minutes after which the device will be switched off if it draws no power.  This is only checked after the configured minimum cycles have been reached.
    * **no_draw_threshold_watts** - threshold below which the device is considered to be drawing no power.
    * **buffer_on_minutes** - number of minutes of continuous PV surplus required before switching on.
    * **buffer_off_minutes** - number of minutes of continuous PV deficit required before switching off.
    * **min_runtime_per_day_minutes** - (optional) minimum number of minutes the device should run per day.
    * **min_cycles_per_day** - (optional) minimum number of controller-counted cycles per day.
    * **interruptible** - whether the device is allowed to be interrupted mid‑cycle.  If true, the device may also be stopped if its power draw exceeds the current grid import for the buffer duration.
    * **sensor_grid_import_components** - one or more sensors that measure positive grid import power.  Their positive values are summed to estimate your total import.
    * **start_time_if_target_not_met** - a fallback time of day after which the device will be started if the daily targets have not been met.  The optional forecast sensor can postpone this start.
    * **scheduled_turn_off_time** - (optional) time of day (HH:MM) after which the controller attempts to switch the device off once daily targets are satisfied. Leave blank to disable the scheduled stop.
    * **sensor_forecast_energy_today** - (optional) sensor containing the remaining PV energy forecast for today in kWh.  When provided, it is used to decide whether the fallback start should be postponed.
    * **sensor_pv_power_now** - sensor measuring your current PV production in watts.

    See the accompanying ``pv_autostart.py`` for a detailed explanation of the logic.

  domain: automation
  input:
    switch_entity:
      name: Appliance switch
      description: >
        The entity id of the device to be controlled, for example ``switch.pool_pump``.
      selector:
        entity:
          domain: switch
    sensor_device_power:
      name: Device power sensor
      description: >
        (Optional) Sensor that reports the current power consumption of the device in watts.  If provided,
        the controller can detect when the device is no longer drawing power and switch it off early.
      default: ''
      selector:
        entity:
          domain: sensor
          multiple: false
    off_after_minutes_without_draw:
      name: Off after minutes without draw
      description: >
        (Optional) Number of minutes the device is allowed to draw less than the specified
        "no draw" threshold before it is switched off.  This delay helps avoid turning off
        devices that intermittently drop below the threshold.
      default: ''
      selector:
        number:
          min: 0
          max: 1440
          mode: box
          unit_of_measurement: min
    no_draw_threshold_watts:
      name: No draw threshold (W)
      description: >
        Power in watts below which the device is considered idle.  When the device draws less than
        this amount of power for the configured duration, it will be turned off (subject to the
        minimum cycles constraint).
      default: 10
      selector:
        number:
          min: 0
          max: 5000
          mode: box
          unit_of_measurement: W
    buffer_on_minutes:
      name: Buffer on (min)
      description: >
        Number of consecutive minutes of PV surplus required before the device is switched on.  This
        hysteresis prevents rapid toggling when the surplus fluctuates.
      default: 3
      selector:
        number:
          min: 0
          max: 120
          mode: box
          unit_of_measurement: min
    buffer_off_minutes:
      name: Buffer off (min)
      description: >
        Number of consecutive minutes of PV deficit required before the device is switched off.  This
        hysteresis prevents rapid toggling when the surplus fluctuates.
      default: 4
      selector:
        number:
          min: 0
          max: 120
          mode: box
          unit_of_measurement: min
    min_runtime_per_day_minutes:
      name: Minimum runtime per day (min)
      description: >
        (Optional) Minimum number of minutes the device should run each day.  When specified, the
        controller will ensure the device runs for at least this amount of time by honouring the
        fallback start time.
      default: ''
      selector:
        number:
          min: 0
          max: 1440
          mode: box
          unit_of_measurement: min
    min_cycles_per_day:
      name: Minimum cycles per day
      description: >
        (Optional) Minimum number of script‑initiated cycles the device should run each day.  Only cycles
        started by this automation are counted.
      default: ''
      selector:
        number:
          min: 0
          max: 10
          mode: box
    interruptible:
      name: Interruptible
      description: >
        If true, the device may be interrupted while running.  When enabled, the controller will
        also stop the device when its power draw exceeds the current grid import for the configured
        buffer duration.  Set to false if the device should always complete its cycle once started.
      default: false
      selector:
        boolean: {}
    sensor_grid_import_components:
      name: Grid import sensors
      description: >
        One or more sensors that report positive grid import power.  The controller sums the
        positive values from these sensors to estimate your current import.  Only the positive
        portions of each sensor are considered; negative values (export) are ignored.
      selector:
        entity:
          domain: sensor
          multiple: true
    start_time_if_target_not_met:
      name: Fallback start time
      description: >
        Time of day after which the device will be started if the daily runtime or cycle targets
        have not yet been met.  When a forecast sensor is provided, it may override this time to
        delay the forced start until later in the day.
      default: '00:00'
      selector:
        time: {}
    sensor_forecast_energy_today:
      name: Forecast energy sensor
      description: >
        (Optional) Sensor providing the remaining forecast PV energy for today in kilowatt‑hours.  When
        provided, the controller uses this value to postpone forced starts when enough energy is
        expected later in the day.
      default: ''
      selector:
        entity:
          domain: sensor
          multiple: false
    sensor_pv_power_now:
      name: PV power sensor
      description: >
        Sensor reporting your current PV production in watts.  This sensor is required and should be
        updated frequently (at least once per minute) for accurate control.
      selector:
        entity:
          domain: sensor
          multiple: false

    exclude_blueprint_turn_on_from_counters:
      name: Exclude manual starts from counters
      description: >
        (Optional) When enabled, manual device starts are ignored by the daily run time and cycle counters.
        Blueprint-triggered runs always count.  Default is false.
      default: false
      selector:
        boolean: {}

    scheduled_turn_off_time:
      name: Scheduled turn off time
      description: >
        (Optional) Time of day (``HH:MM``) after which the controller will try to switch the device off.
        The check mirrors the fallback start behaviour and respects minimum runtime/cycle targets unless
        'force turn off if target unmet' is enabled.  Leave blank to disable the scheduled stop.
      default: ''
      selector:
        time: {}

    force_turn_off_if_target_unreached:
      name: Force turn off even if target unmet
      description: >
        (Optional) When enabled, the device will be turned off at the scheduled turn off time even if the configured
        minimum daily runtime or cycle targets have not yet been met.  When disabled, the device will
        continue running until the targets are reached.  Default is false.
      default: false
      selector:
        boolean: {}

mode: restart
trigger:
  - platform: homeassistant
    event: start

action:
  - service: pyscript.pv_autostart
    data:
      # Use the automation entity id to create a unique automation id for the script
      automation_id: '{{ this.entity_id }}'
      switch_entity: !input switch_entity
      sensor_device_power: !input sensor_device_power
      off_after_minutes_without_draw: !input off_after_minutes_without_draw
      no_draw_threshold_watts: !input no_draw_threshold_watts
      buffer_on_minutes: !input buffer_on_minutes
      buffer_off_minutes: !input buffer_off_minutes
      min_runtime_per_day_minutes: !input min_runtime_per_day_minutes
      min_cycles_per_day: !input min_cycles_per_day
      interruptible: !input interruptible
      sensor_grid_import_components: !input sensor_grid_import_components
      start_time_if_target_not_met: !input start_time_if_target_not_met
      sensor_forecast_energy_today: !input sensor_forecast_energy_today
      sensor_pv_power_now: !input sensor_pv_power_now
      exclude_blueprint_turn_on_from_counters: !input exclude_blueprint_turn_on_from_counters
      scheduled_turn_off_time: !input scheduled_turn_off_time
      force_turn_off_if_target_unreached: !input force_turn_off_if_target_unreached
